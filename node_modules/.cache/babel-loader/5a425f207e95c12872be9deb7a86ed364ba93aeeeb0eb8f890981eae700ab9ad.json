{"ast":null,"code":"var _jsxFileName = \"/Users/sahana/Documents/GitHub/Lundgren-Lindqvist-AB-Assignment/appassignment/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport WeatherCard from './components/WeatherCard';\nimport ErrorMessage from './components/ErrorMessage';\nimport LoadingSpinner from './components/LoadSpinner';\nimport { fetchWeather } from './utils/api';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';\nimport L from 'leaflet';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationPicker = ({\n  onLocationSelect\n}) => {\n  _s();\n  const map = useMapEvents({\n    click(e) {\n      const {\n        lat,\n        lng\n      } = e.latlng;\n      onLocationSelect(lat, lng);\n    }\n  });\n  return null;\n};\n_s(LocationPicker, \"D2AvXN8Rt/r3DPix6IJfcPGmgF0=\", false, function () {\n  return [useMapEvents];\n});\n_c = LocationPicker;\nconst App = () => {\n  _s2();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const handleLocationSelect = async (lat, lon) => {\n    setLatitude(lat);\n    setLongitude(lon);\n  };\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      if (latitude && longitude) {\n        try {\n          setLoading(true);\n          const data = await fetchWeather(latitude, longitude);\n          setWeather(data);\n        } catch (err) {\n          setError('Failed to retrieve weather data.');\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n    fetchWeatherData();\n  }, [latitude, longitude]);\n  if (loading) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n    message: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 21\n  }, this);\n  if (weather) return /*#__PURE__*/_jsxDEV(WeatherCard, {\n    weather: weather\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [51.505, -0.09],\n      zoom: 13,\n      style: {\n        height: '500px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LocationPicker, {\n        onLocationSelect: handleLocationSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), latitude && longitude && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [latitude, longitude],\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [\"Latitude: \", latitude, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 36\n          }, this), \" Longitude: \", longitude]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s2(App, \"5WsEFLJ5GLC6szbuoW5EkSkwWtA=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"LocationPicker\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","WeatherCard","ErrorMessage","LoadingSpinner","fetchWeather","MapContainer","TileLayer","Marker","Popup","useMapEvents","L","jsxDEV","_jsxDEV","LocationPicker","onLocationSelect","_s","map","click","e","lat","lng","latlng","_c","App","_s2","weather","setWeather","loading","setLoading","error","setError","latitude","setLatitude","longitude","setLongitude","handleLocationSelect","lon","fetchWeatherData","data","err","fileName","_jsxFileName","lineNumber","columnNumber","message","children","center","zoom","style","height","width","url","position","_c2","$RefreshReg$"],"sources":["/Users/sahana/Documents/GitHub/Lundgren-Lindqvist-AB-Assignment/appassignment/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport WeatherCard from './components/WeatherCard';\nimport ErrorMessage from './components/ErrorMessage';\nimport LoadingSpinner from './components/LoadSpinner';\nimport { fetchWeather } from './utils/api';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';\nimport L from 'leaflet';\nimport './App.css';\n\nconst LocationPicker = ({ onLocationSelect }) => {\n  const map = useMapEvents({\n    click(e) {\n      const { lat, lng } = e.latlng;\n      onLocationSelect(lat, lng);\n    },\n  });\n\n  return null;\n};\n\nconst App = () => {\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n\n  const handleLocationSelect = async (lat, lon) => {\n    setLatitude(lat);\n    setLongitude(lon);\n  };\n\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      if (latitude && longitude) {\n        try {\n          setLoading(true);\n          const data = await fetchWeather(latitude, longitude);\n          setWeather(data);\n        } catch (err) {\n          setError('Failed to retrieve weather data.');\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchWeatherData();\n  }, [latitude, longitude]);\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage message={error} />;\n  if (weather) return <WeatherCard weather={weather} />;\n\n  return (\n    <div>\n      <MapContainer center={[51.505, -0.09]} zoom={13} style={{ height: '500px', width: '100%' }}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <LocationPicker onLocationSelect={handleLocationSelect} />\n        {latitude && longitude && (\n          <Marker position={[latitude, longitude]}>\n            <Popup>\n              Latitude: {latitude} <br /> Longitude: {longitude}\n            </Popup>\n          </Marker>\n        )}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}