{"ast":null,"code":"var _jsxFileName = \"/Users/sahana/Documents/GitHub/Lundgren-Lindqvist-AB-Assignment/appassignment/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport WeatherCard from './components/WeatherCard';\nimport ErrorMessage from './components/ErrorMessage';\nimport LoadingSpinner from './components/LoadSpinner';\nimport { fetchWeather } from './utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      setError('Geolocation is not supported by your browser.');\n      setLoading(false);\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(async position => {\n      try {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        const data = await fetchWeather(latitude, longitude);\n        setWeather(data);\n      } catch (err) {\n        setError('Failed to fetch weather data.');\n      } finally {\n        setLoading(false);\n      }\n    }, () => {\n      setError('Unable to retrieve your location.');\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n    message: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 21\n  }, this);\n  if (weather) return /*#__PURE__*/_jsxDEV(WeatherCard, {\n    weather: weather\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 23\n  }, this);\n  return null;\n};\n_s(App, \"TVsks5rssGOnhEQ1DibgKtVD/q4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","WeatherCard","ErrorMessage","LoadingSpinner","fetchWeather","jsxDEV","_jsxDEV","App","_s","weather","setWeather","loading","setLoading","error","setError","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","data","err","fileName","_jsxFileName","lineNumber","columnNumber","message","_c","$RefreshReg$"],"sources":["/Users/sahana/Documents/GitHub/Lundgren-Lindqvist-AB-Assignment/appassignment/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport WeatherCard from './components/WeatherCard';\nimport ErrorMessage from './components/ErrorMessage';\nimport LoadingSpinner from './components/LoadSpinner';\nimport { fetchWeather } from './utils/api';\n\n\nconst App = () => {\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      setError('Geolocation is not supported by your browser.');\n      setLoading(false);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        try {\n          const { latitude, longitude } = position.coords;\n          const data = await fetchWeather(latitude, longitude);\n          setWeather(data);\n        } catch (err) {\n          setError('Failed to fetch weather data.');\n        } finally {\n          setLoading(false);\n        }\n      },\n      () => {\n        setError('Unable to retrieve your location.');\n        setLoading(false);\n      }\n    );\n  }, []);\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage message={error} />;\n  if (weather) return <WeatherCard weather={weather} />;\n  return null;\n};\n\nexport default App;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,cAAc,MAAM,0BAA0B;AACrD,SAASC,YAAY,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG3C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,SAAS,CAACC,WAAW,EAAE;MAC1BF,QAAQ,CAAC,+CAA+C,CAAC;MACzDF,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEAG,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtC,MAAOC,QAAQ,IAAK;MAClB,IAAI;QACF,MAAM;UAAEC,QAAQ;UAAEC;QAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;QAC/C,MAAMC,IAAI,GAAG,MAAMlB,YAAY,CAACe,QAAQ,EAAEC,SAAS,CAAC;QACpDV,UAAU,CAACY,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZT,QAAQ,CAAC,+BAA+B,CAAC;MAC3C,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,EACD,MAAM;MACJE,QAAQ,CAAC,mCAAmC,CAAC;MAC7CF,UAAU,CAAC,KAAK,CAAC;IACnB,CACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,OAAO,EAAE,oBAAOL,OAAA,CAACH,cAAc;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACtC,IAAId,KAAK,EAAE,oBAAOP,OAAA,CAACJ,YAAY;IAAC0B,OAAO,EAAEf;EAAM;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAClD,IAAIlB,OAAO,EAAE,oBAAOH,OAAA,CAACL,WAAW;IAACQ,OAAO,EAAEA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACrD,OAAO,IAAI;AACb,CAAC;AAACnB,EAAA,CAnCID,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAqCT,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}