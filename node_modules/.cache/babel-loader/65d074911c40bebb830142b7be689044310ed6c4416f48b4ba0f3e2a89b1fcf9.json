{"ast":null,"code":"const BASE_URL = 'https://api.weatherapi.com/v1/current.json';\nconst GEOLOCATION_URL = 'http://ip-api.com/json/';\nexport const fetchWeather = async (lat, lon) => {\n  const url = `https://wttr.in/?format=j1&lat=${lat}&lon=${lon}`; // Using wttr.in without API key\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Failed to fetch weather data.');\n  }\n  const data = await response.json();\n  return {\n    name: data.nearest_area[0].areaName[0].value,\n    main: {\n      temp: data.current_condition[0].temp_C,\n      humidity: data.current_condition[0].humidity\n    },\n    weather: [{\n      description: data.current_condition[0].weatherDesc[0].value\n    }]\n  };\n};\nexport const fetchUserLocation = async () => {\n  const response = await fetch(GEOLOCATION_URL);\n  if (!response.ok) {\n    throw new Error('Failed to fetch location data.');\n  }\n  return response.json();\n};","map":{"version":3,"names":["BASE_URL","GEOLOCATION_URL","fetchWeather","lat","lon","url","response","fetch","ok","Error","data","json","name","nearest_area","areaName","value","main","temp","current_condition","temp_C","humidity","weather","description","weatherDesc","fetchUserLocation"],"sources":["/Users/sahana/Documents/GitHub/Lundgren-Lindqvist-AB-Assignment/src/utils/api.js"],"sourcesContent":["const BASE_URL = 'https://api.weatherapi.com/v1/current.json';\nconst GEOLOCATION_URL = 'http://ip-api.com/json/';\n\nexport const fetchWeather = async (lat, lon) => {\n  const url = `https://wttr.in/?format=j1&lat=${lat}&lon=${lon}`; // Using wttr.in without API key\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error('Failed to fetch weather data.');\n  }\n  const data = await response.json();\n  return {\n    name: data.nearest_area[0].areaName[0].value,\n    main: {\n      temp: data.current_condition[0].temp_C,\n      humidity: data.current_condition[0].humidity\n    },\n    weather: [\n      {\n        description: data.current_condition[0].weatherDesc[0].value\n      }\n    ]\n  };\n};\n\nexport const fetchUserLocation = async () => {\n  const response = await fetch(GEOLOCATION_URL);\n  if (!response.ok) {\n    throw new Error('Failed to fetch location data.');\n  }\n  return response.json();\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,4CAA4C;AAC7D,MAAMC,eAAe,GAAG,yBAAyB;AAEjD,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAC9C,MAAMC,GAAG,GAAG,kCAAkCF,GAAG,QAAQC,GAAG,EAAE,CAAC,CAAC;EAChE,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAClD;EACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,OAAO;IACLC,IAAI,EAAEF,IAAI,CAACG,YAAY,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACC,KAAK;IAC5CC,IAAI,EAAE;MACJC,IAAI,EAAEP,IAAI,CAACQ,iBAAiB,CAAC,CAAC,CAAC,CAACC,MAAM;MACtCC,QAAQ,EAAEV,IAAI,CAACQ,iBAAiB,CAAC,CAAC,CAAC,CAACE;IACtC,CAAC;IACDC,OAAO,EAAE,CACP;MACEC,WAAW,EAAEZ,IAAI,CAACQ,iBAAiB,CAAC,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC,CAAC,CAACR;IACxD,CAAC;EAEL,CAAC;AACH,CAAC;AAED,OAAO,MAAMS,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAACN,eAAe,CAAC;EAC7C,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnD;EACA,OAAOH,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}