{"ast":null,"code":"var _jsxFileName = \"/Users/sahana/Documents/GitHub/Lundgren-Lindqvist-AB-Assignment/appassignment/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport WeatherCard from './components/WeatherCard';\nimport ErrorMessage from './components/ErrorMessage';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport { fetchWeather, fetchUserLocation } from './utils/api';\nimport { formatTemperature, capitalize } from './utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const getLocationAndFetchWeather = async () => {\n      try {\n        let latitude, longitude;\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(async position => {\n            latitude = position.coords.latitude;\n            longitude = position.coords.longitude;\n            const data = await fetchWeather(latitude, longitude);\n            setWeather(data);\n          }, async () => {\n            // Fallback to IP-based geolocation\n            const location = await fetchUserLocation();\n            latitude = location.lat;\n            longitude = location.lon;\n            const data = await fetchWeather(latitude, longitude);\n            setWeather(data);\n          });\n        } else {\n          // Fallback to IP-based geolocation\n          const location = await fetchUserLocation();\n          latitude = location.lat;\n          longitude = location.lon;\n          const data = await fetchWeather(latitude, longitude);\n          setWeather(data);\n        }\n      } catch (err) {\n        setError('Failed to retrieve weather data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getLocationAndFetchWeather();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n    message: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 21\n  }, this);\n  if (weather) return /*#__PURE__*/_jsxDEV(WeatherCard, {\n    weather: weather\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 23\n  }, this);\n  return null;\n};\n_s(App, \"TVsks5rssGOnhEQ1DibgKtVD/q4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","WeatherCard","ErrorMessage","LoadingSpinner","fetchWeather","fetchUserLocation","formatTemperature","capitalize","jsxDEV","_jsxDEV","App","_s","weather","setWeather","loading","setLoading","error","setError","getLocationAndFetchWeather","latitude","longitude","navigator","geolocation","getCurrentPosition","position","coords","data","location","lat","lon","err","fileName","_jsxFileName","lineNumber","columnNumber","message","_c","$RefreshReg$"],"sources":["/Users/sahana/Documents/GitHub/Lundgren-Lindqvist-AB-Assignment/appassignment/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport WeatherCard from './components/WeatherCard';\nimport ErrorMessage from './components/ErrorMessage';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport { fetchWeather, fetchUserLocation } from './utils/api';\nimport { formatTemperature, capitalize } from './utils/helpers';\n\nconst App = () => {\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getLocationAndFetchWeather = async () => {\n      try {\n        let latitude, longitude;\n\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(\n            async (position) => {\n              latitude = position.coords.latitude;\n              longitude = position.coords.longitude;\n              const data = await fetchWeather(latitude, longitude);\n              setWeather(data);\n            },\n            async () => {\n              // Fallback to IP-based geolocation\n              const location = await fetchUserLocation();\n              latitude = location.lat;\n              longitude = location.lon;\n              const data = await fetchWeather(latitude, longitude);\n              setWeather(data);\n            }\n          );\n        } else {\n          // Fallback to IP-based geolocation\n          const location = await fetchUserLocation();\n          latitude = location.lat;\n          longitude = location.lon;\n          const data = await fetchWeather(latitude, longitude);\n          setWeather(data);\n        }\n      } catch (err) {\n        setError('Failed to retrieve weather data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getLocationAndFetchWeather();\n  }, []);\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage message={error} />;\n  if (weather) return <WeatherCard weather={weather} />;\n  return null;\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,SAASC,YAAY,EAAEC,iBAAiB,QAAQ,aAAa;AAC7D,SAASC,iBAAiB,EAAEC,UAAU,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMkB,0BAA0B,GAAG,MAAAA,CAAA,KAAY;MAC7C,IAAI;QACF,IAAIC,QAAQ,EAAEC,SAAS;QAEvB,IAAIC,SAAS,CAACC,WAAW,EAAE;UACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtC,MAAOC,QAAQ,IAAK;YAClBL,QAAQ,GAAGK,QAAQ,CAACC,MAAM,CAACN,QAAQ;YACnCC,SAAS,GAAGI,QAAQ,CAACC,MAAM,CAACL,SAAS;YACrC,MAAMM,IAAI,GAAG,MAAMtB,YAAY,CAACe,QAAQ,EAAEC,SAAS,CAAC;YACpDP,UAAU,CAACa,IAAI,CAAC;UAClB,CAAC,EACD,YAAY;YACV;YACA,MAAMC,QAAQ,GAAG,MAAMtB,iBAAiB,CAAC,CAAC;YAC1Cc,QAAQ,GAAGQ,QAAQ,CAACC,GAAG;YACvBR,SAAS,GAAGO,QAAQ,CAACE,GAAG;YACxB,MAAMH,IAAI,GAAG,MAAMtB,YAAY,CAACe,QAAQ,EAAEC,SAAS,CAAC;YACpDP,UAAU,CAACa,IAAI,CAAC;UAClB,CACF,CAAC;QACH,CAAC,MAAM;UACL;UACA,MAAMC,QAAQ,GAAG,MAAMtB,iBAAiB,CAAC,CAAC;UAC1Cc,QAAQ,GAAGQ,QAAQ,CAACC,GAAG;UACvBR,SAAS,GAAGO,QAAQ,CAACE,GAAG;UACxB,MAAMH,IAAI,GAAG,MAAMtB,YAAY,CAACe,QAAQ,EAAEC,SAAS,CAAC;UACpDP,UAAU,CAACa,IAAI,CAAC;QAClB;MACF,CAAC,CAAC,OAAOI,GAAG,EAAE;QACZb,QAAQ,CAAC,kCAAkC,CAAC;MAC9C,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,0BAA0B,CAAC,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE,oBAAOL,OAAA,CAACN,cAAc;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACtC,IAAIlB,KAAK,EAAE,oBAAOP,OAAA,CAACP,YAAY;IAACiC,OAAO,EAAEnB;EAAM;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAClD,IAAItB,OAAO,EAAE,oBAAOH,OAAA,CAACR,WAAW;IAACW,OAAO,EAAEA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACrD,OAAO,IAAI;AACb,CAAC;AAACvB,EAAA,CAjDID,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAmDT,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}